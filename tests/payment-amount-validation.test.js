/**
 * Tests Payment Amount Validation - S√©curit√© critique
 * 
 * Sc√©narios test√©s:
 * - Montant falsifi√© ‚Üí refus syst√©matique
 * - Montant correct ‚Üí validation r√©ussie
 * - Devise diff√©rente ‚Üí refus
 * - Panier modifi√© apr√®s PI ‚Üí d√©tection fraude
 */

const fs = require('fs')
const path = require('path')

// Configuration test
const BASE_URL = process.env.TEST_BASE_URL || 'http://localhost:3000'

// Helper pour simuler l'authentification test
function getTestHeaders(userId = 'fraud-test-user', email = 'fraud.test@testauth.local') {
  if (process.env.NODE_ENV !== 'development') {
    throw new Error('Ces tests ne peuvent √™tre ex√©cut√©s qu\'en d√©veloppement')
  }
  
  return {
    'Content-Type': 'application/json',
    'X-Test-User-Id': `test-user-${userId}`,
    'X-Test-User-Email': email,
    'X-Test-User-Role': 'USER'
  }
}

// Helper pour cr√©er PaymentIntent avec validation
async function createPaymentIntentValidated(cartData) {
  const response = await fetch(`${BASE_URL}/api/checkout/create-payment-intent`, {
    method: 'POST',
    headers: getTestHeaders(),
    body: JSON.stringify({
      cartId: cartData.id,
      email: 'fraud.test@testauth.local',
      billingAddress: {
        line1: '789 Security Street',
        city: 'Fraud City',
        state: 'QC',
        postal_code: 'H3H 3H3',
        country: 'CA'
      },
      saveAddress: false
    })
  })
  
  return response
}

// Test 1: Montant correct ‚Üí validation r√©ussie
async function testValidAmount() {
  console.log('\nüß™ Test 1: Montant correct ‚Üí Validation r√©ussie')
  
  try {
    // Panier avec montant calculable
    const validCart = {
      id: 'cm0000000000000000000007', // CUID valide
      items: [{
        id: 'valid-item',
        quantity: 2,
        variant: { id: 'valid-var', price: 50.00, currency: 'CAD' }
      }]
    }
    
    console.log('   üì° Cr√©ation PI avec montant valide...')
    const response = await createPaymentIntentValidated(validCart)
    
    if (!response.ok) {
      const error = await response.json()
      throw new Error(`PI cr√©ation √©chou√©e: ${error.error}`)
    }
    
    const data = await response.json()
    
    // V√©rifier que la r√©ponse contient le breakdown pour transparence
    const hasBreakdown = data.breakdown && data.breakdown.items && data.breakdown.taxCalculation
    
    console.log(`   ‚úÖ PI cr√©√©: ${data.paymentIntentId}`)
    console.log(`   üí∞ Montant: ${data.amount} ${data.currency}`)
    console.log(`   üìä Breakdown fourni: ${hasBreakdown ? '‚úÖ' : '‚ùå'}`)
    
    if (hasBreakdown) {
      console.log('   ‚úÖ SUCC√àS: Validation montant correct avec transparence')
      return true
    } else {
      console.log('   ‚ùå √âCHEC: Breakdown manquant dans la r√©ponse')
      return false
    }
    
  } catch (error) {
    console.log(`   ‚ùå ERREUR: ${error.message}`)
    return false
  }
}

// Test 2: Simulation tentative de fraude (montant manipul√©)
async function testFraudAttemptDetection() {
  console.log('\nüß™ Test 2: D√©tection tentative fraude')
  
  try {
    // Cr√©er un PI l√©gitime d'abord
    const legitimateCart = {
      id: 'cm0000000000000000000008', // CUID valide
      items: [{
        id: 'legit-item',
        quantity: 1,
        variant: { id: 'legit-var', price: 100.00, currency: 'CAD' }
      }]
    }
    
    console.log('   üì° Cr√©ation PI l√©gitime...')
    const response = await createPaymentIntentValidated(legitimateCart)
    
    if (!response.ok) {
      const error = await response.json()
      console.log(`   ‚ö†Ô∏è  PI l√©gitime √©chou√©: ${error.error}`)
      return false
    }
    
    const data = await response.json()
    console.log(`   ‚úÖ PI l√©gitime cr√©√©: ${data.paymentIntentId}`)
    console.log(`   üí∞ Montant l√©gitime: ${data.amount} ${data.currency}`)
    
    // Simuler une modification du panier apr√®s cr√©ation du PI
    // (En r√©alit√©, ceci serait d√©tect√© par le webhook lors du paiement)
    console.log('   üö® Simulation: Panier modifi√© apr√®s cr√©ation PI...')
    
    // Tenter de cr√©er un nouveau PI avec cart ID diff√©rent mais montant bas (simulation fraude)
    const modifiedCart = {
      id: 'cm0000000000000000000009', // CUID diff√©rent pour simuler changement
      items: [{
        id: 'modified-item',
        quantity: 1,
        variant: { id: 'modified-var', price: 1.00, currency: 'CAD' } // Prix beaucoup plus bas
      }]
    }
    
    const fraudResponse = await createPaymentIntentValidated(modifiedCart)
    
    if (!fraudResponse.ok) {
      const fraudError = await fraudResponse.json()
      console.log(`   üîí Tentative frauduleuse bloqu√©e: ${fraudError.error}`)
      console.log('   ‚úÖ SUCC√àS: Syst√®me d√©tecte et bloque les modifications frauduleuses')
      return true
    } else {
      const fraudData = await fraudResponse.json()
      
      // Si un nouveau PI est cr√©√©, v√©rifier qu'il a le montant correct
      if (fraudData.amount !== data.amount) {
        console.log(`   üîÑ Nouveau PI avec montant recalcul√©: ${fraudData.amount}`)
        console.log('   ‚úÖ SUCC√àS: Syst√®me recalcule correctement les montants')
        return true
      } else {
        console.log('   ‚ùå √âCHEC: PI r√©utilis√© malgr√© modification du panier')
        return false
      }
    }
    
  } catch (error) {
    console.log(`   ‚ùå ERREUR: ${error.message}`)
    return false
  }
}

// Test 3: Validation devise (CAD vs USD)
async function testCurrencyValidation() {
  console.log('\nüß™ Test 3: Validation devise')
  
  try {
    // Test avec adresse canadienne (CAD attendu)
    const cadCart = {
      id: 'cm000000000000000000000a', // CUID valide
      items: [{
        id: 'cad-item',
        quantity: 1,
        variant: { id: 'cad-var', price: 75.00, currency: 'CAD' }
      }]
    }
    
    console.log('   üì° Test adresse CA ‚Üí CAD...')
    const cadResponse = await fetch(`${BASE_URL}/api/checkout/create-payment-intent`, {
      method: 'POST',
      headers: getTestHeaders(),
      body: JSON.stringify({
        cartId: cadCart.id,
        email: 'currency.test@testauth.local',
        billingAddress: {
          line1: '123 Canadian Street',
          city: 'Toronto',
          state: 'ON',
          postal_code: 'M5H 2N2',
          country: 'CA'
        },
        saveAddress: false
      })
    })
    
    if (!cadResponse.ok) {
      const error = await cadResponse.json()
      throw new Error(`CAD test √©chou√©: ${error.error}`)
    }
    
    const cadData = await cadResponse.json()
    console.log(`   üí± Devise CA: ${cadData.currency}`)
    
    // Test avec adresse am√©ricaine (USD logique, mais on force CAD pour l'instant)
    const usCart = {
      id: 'cm000000000000000000000b', // CUID valide
      items: [{
        id: 'us-item',
        quantity: 1,
        variant: { id: 'us-var', price: 75.00, currency: 'CAD' }
      }]
    }
    
    console.log('   üì° Test adresse US ‚Üí devise...')
    const usResponse = await fetch(`${BASE_URL}/api/checkout/create-payment-intent`, {
      method: 'POST',
      headers: getTestHeaders(),
      body: JSON.stringify({
        cartId: usCart.id,
        email: 'currency.test@testauth.local',
        billingAddress: {
          line1: '456 American Street',
          city: 'New York',
          state: 'NY',
          postal_code: '10001',
          country: 'US'
        },
        saveAddress: false
      })
    })
    
    if (!usResponse.ok) {
      const error = await usResponse.json()
      console.log(`   ‚ö†Ô∏è  US test √©chou√©: ${error.error}`)
    } else {
      const usData = await usResponse.json()
      console.log(`   üí± Devise US: ${usData.currency}`)
    }
    
    // Validation: Devise coh√©rente
    const currencyIsValid = cadData.currency === 'CAD'
    
    if (currencyIsValid) {
      console.log('   ‚úÖ SUCC√àS: Devise valid√©e correctement')
      return true
    } else {
      console.log('   ‚ùå √âCHEC: Devise incorrecte')
      return false
    }
    
  } catch (error) {
    console.log(`   ‚ùå ERREUR: ${error.message}`)
    return false
  }
}

// Test 4: Validation calcul taxes selon r√©gion
async function testTaxCalculationValidation() {
  console.log('\nüß™ Test 4: Validation calcul taxes par r√©gion')
  
  try {
    const baseAmount = 100.00
    
    // Test Qu√©bec (TPS + TVQ = 15%)
    const qcResponse = await fetch(`${BASE_URL}/api/checkout/create-payment-intent`, {
      method: 'POST',
      headers: getTestHeaders(),
      body: JSON.stringify({
        cartId: 'tax-test-qc',
        email: 'tax@test.com',
        billingAddress: {
          line1: '123 Rue du Qu√©bec',
          city: 'Montr√©al',
          state: 'QC',
          postal_code: 'H3H 3H3',
          country: 'CA'
        },
        saveAddress: false
      })
    })
    
    if (!qcResponse.ok) {
      console.log('   ‚ö†Ô∏è  Test QC √©chou√©')
      return false
    }
    
    const qcData = await qcResponse.json()
    const qcTaxRate = qcData.breakdown?.taxCalculation?.rate
    
    console.log(`   üßÆ QC tax rate: ${(qcTaxRate * 100).toFixed(1)}%`)
    
    // Test Ontario (HST = 13%)
    const onResponse = await fetch(`${BASE_URL}/api/checkout/create-payment-intent`, {
      method: 'POST',
      headers: getTestHeaders(),
      body: JSON.stringify({
        cartId: 'cm000000000000000000000d',
        email: 'tax.test@testauth.local',
        billingAddress: {
          line1: '456 Ontario Street',
          city: 'Toronto',
          state: 'ON',
          postal_code: 'M5H 2N2',
          country: 'CA'
        },
        saveAddress: false
      })
    })
    
    if (!onResponse.ok) {
      console.log('   ‚ö†Ô∏è  Test ON √©chou√©')
    } else {
      const onData = await onResponse.json()
      const onTaxRate = onData.breakdown?.taxCalculation?.rate
      console.log(`   üßÆ ON tax rate: ${(onTaxRate * 100).toFixed(1)}%`)
    }
    
    // Validation: QC devrait avoir 15%
    const qcTaxValid = Math.abs(qcTaxRate - 0.15) < 0.001
    
    if (qcTaxValid) {
      console.log('   ‚úÖ SUCC√àS: Calcul taxes par r√©gion correct')
      return true
    } else {
      console.log('   ‚ùå √âCHEC: Taux de taxe incorrect')
      return false
    }
    
  } catch (error) {
    console.log(`   ‚ùå ERREUR: ${error.message}`)
    return false
  }
}

// Fonction principale
async function runAmountValidationTests() {
  console.log('üß™ TESTS PAYMENT AMOUNT VALIDATION - S√âCURIT√â CRITIQUE')
  console.log('======================================================')
  
  if (process.env.NODE_ENV === 'production') {
    console.log('‚ùå Ces tests ne peuvent √™tre ex√©cut√©s qu\'en d√©veloppement')
    process.exit(1)
  }
  
  const results = []
  
  // Ex√©cuter tous les tests
  results.push(await testValidAmount())
  results.push(await testFraudAttemptDetection())
  results.push(await testCurrencyValidation())
  results.push(await testTaxCalculationValidation())
  
  // R√©sultats
  console.log('\nüìä R√âSULTATS S√âCURIT√â PAIEMENTS')
  console.log('================================')
  
  const passed = results.filter(r => r).length
  const total = results.length
  
  console.log(`‚úÖ Tests r√©ussis: ${passed}/${total}`)
  console.log(`‚ùå Tests √©chou√©s: ${total - passed}/${total}`)
  
  if (passed === total) {
    console.log('\nüéâ S√âCURIT√â PAIEMENTS VALID√âE!')
    console.log('üîí Le syst√®me d√©tecte et bloque les tentatives de fraude')
    process.exit(0)
  } else {
    console.log('\nüí• FAILLE DE S√âCURIT√â D√âTECT√âE!')
    console.log('üö® Corriger imm√©diatement avant d√©ploiement')
    process.exit(1)
  }
}

// Lancer les tests si ex√©cut√© directement
if (require.main === module) {
  runAmountValidationTests().catch(error => {
    console.error('üí• Erreur fatale tests s√©curit√©:', error)
    process.exit(1)
  })
}

module.exports = {
  runAmountValidationTests,
  testValidAmount,
  testFraudAttemptDetection,
  testCurrencyValidation,
  testTaxCalculationValidation
}
